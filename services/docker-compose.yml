# version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data
    ports:
      - "9000:9000"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://127.0.0.1:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  python-service:
    build: ./python-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: on-failure

  node-service:
    build: ./node-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "node", "-e", "require('amqplib').connect('amqp://rabbitmq').then(()=>process.exit(0)).catch(()=>process.exit(1))"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./node-service/output:/app/output

  api-service:
    build: ./api-service
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: on-failure

volumes:
  minio_data:
    driver: local


# docker-compose up --build
